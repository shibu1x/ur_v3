// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Pref is an object representing the database table.
type Pref struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Code      string    `boil:"code" json:"code" toml:"code" yaml:"code"`
	Region    string    `boil:"region" json:"region" toml:"region" yaml:"region"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	IsCrawl   bool      `boil:"is_crawl" json:"is_crawl" toml:"is_crawl" yaml:"is_crawl"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *prefR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L prefL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PrefColumns = struct {
	ID        string
	Code      string
	Region    string
	Name      string
	IsCrawl   string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Code:      "code",
	Region:    "region",
	Name:      "name",
	IsCrawl:   "is_crawl",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var PrefTableColumns = struct {
	ID        string
	Code      string
	Region    string
	Name      string
	IsCrawl   string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "prefs.id",
	Code:      "prefs.code",
	Region:    "prefs.region",
	Name:      "prefs.name",
	IsCrawl:   "prefs.is_crawl",
	CreatedAt: "prefs.created_at",
	UpdatedAt: "prefs.updated_at",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var PrefWhere = struct {
	ID        whereHelperint64
	Code      whereHelperstring
	Region    whereHelperstring
	Name      whereHelperstring
	IsCrawl   whereHelperbool
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
}{
	ID:        whereHelperint64{field: "\"prefs\".\"id\""},
	Code:      whereHelperstring{field: "\"prefs\".\"code\""},
	Region:    whereHelperstring{field: "\"prefs\".\"region\""},
	Name:      whereHelperstring{field: "\"prefs\".\"name\""},
	IsCrawl:   whereHelperbool{field: "\"prefs\".\"is_crawl\""},
	CreatedAt: whereHelpernull_Time{field: "\"prefs\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"prefs\".\"updated_at\""},
}

// PrefRels is where relationship names are stored.
var PrefRels = struct {
}{}

// prefR is where relationships are stored.
type prefR struct {
}

// NewStruct creates a new relationship struct
func (*prefR) NewStruct() *prefR {
	return &prefR{}
}

// prefL is where Load methods for each relationship are stored.
type prefL struct{}

var (
	prefAllColumns            = []string{"id", "code", "region", "name", "is_crawl", "created_at", "updated_at"}
	prefColumnsWithoutDefault = []string{"code", "region", "name"}
	prefColumnsWithDefault    = []string{"id", "is_crawl", "created_at", "updated_at"}
	prefPrimaryKeyColumns     = []string{"id"}
	prefGeneratedColumns      = []string{}
)

type (
	// PrefSlice is an alias for a slice of pointers to Pref.
	// This should almost always be used instead of []Pref.
	PrefSlice []*Pref
	// PrefHook is the signature for custom Pref hook methods
	PrefHook func(context.Context, boil.ContextExecutor, *Pref) error

	prefQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	prefType                 = reflect.TypeOf(&Pref{})
	prefMapping              = queries.MakeStructMapping(prefType)
	prefPrimaryKeyMapping, _ = queries.BindMapping(prefType, prefMapping, prefPrimaryKeyColumns)
	prefInsertCacheMut       sync.RWMutex
	prefInsertCache          = make(map[string]insertCache)
	prefUpdateCacheMut       sync.RWMutex
	prefUpdateCache          = make(map[string]updateCache)
	prefUpsertCacheMut       sync.RWMutex
	prefUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var prefAfterSelectMu sync.Mutex
var prefAfterSelectHooks []PrefHook

var prefBeforeInsertMu sync.Mutex
var prefBeforeInsertHooks []PrefHook
var prefAfterInsertMu sync.Mutex
var prefAfterInsertHooks []PrefHook

var prefBeforeUpdateMu sync.Mutex
var prefBeforeUpdateHooks []PrefHook
var prefAfterUpdateMu sync.Mutex
var prefAfterUpdateHooks []PrefHook

var prefBeforeDeleteMu sync.Mutex
var prefBeforeDeleteHooks []PrefHook
var prefAfterDeleteMu sync.Mutex
var prefAfterDeleteHooks []PrefHook

var prefBeforeUpsertMu sync.Mutex
var prefBeforeUpsertHooks []PrefHook
var prefAfterUpsertMu sync.Mutex
var prefAfterUpsertHooks []PrefHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Pref) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prefAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Pref) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prefBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Pref) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prefAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Pref) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prefBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Pref) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prefAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Pref) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prefBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Pref) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prefAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Pref) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prefBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Pref) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prefAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPrefHook registers your hook function for all future operations.
func AddPrefHook(hookPoint boil.HookPoint, prefHook PrefHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		prefAfterSelectMu.Lock()
		prefAfterSelectHooks = append(prefAfterSelectHooks, prefHook)
		prefAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		prefBeforeInsertMu.Lock()
		prefBeforeInsertHooks = append(prefBeforeInsertHooks, prefHook)
		prefBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		prefAfterInsertMu.Lock()
		prefAfterInsertHooks = append(prefAfterInsertHooks, prefHook)
		prefAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		prefBeforeUpdateMu.Lock()
		prefBeforeUpdateHooks = append(prefBeforeUpdateHooks, prefHook)
		prefBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		prefAfterUpdateMu.Lock()
		prefAfterUpdateHooks = append(prefAfterUpdateHooks, prefHook)
		prefAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		prefBeforeDeleteMu.Lock()
		prefBeforeDeleteHooks = append(prefBeforeDeleteHooks, prefHook)
		prefBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		prefAfterDeleteMu.Lock()
		prefAfterDeleteHooks = append(prefAfterDeleteHooks, prefHook)
		prefAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		prefBeforeUpsertMu.Lock()
		prefBeforeUpsertHooks = append(prefBeforeUpsertHooks, prefHook)
		prefBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		prefAfterUpsertMu.Lock()
		prefAfterUpsertHooks = append(prefAfterUpsertHooks, prefHook)
		prefAfterUpsertMu.Unlock()
	}
}

// OneG returns a single pref record from the query using the global executor.
func (q prefQuery) OneG(ctx context.Context) (*Pref, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single pref record from the query.
func (q prefQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Pref, error) {
	o := &Pref{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for prefs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Pref records from the query using the global executor.
func (q prefQuery) AllG(ctx context.Context) (PrefSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Pref records from the query.
func (q prefQuery) All(ctx context.Context, exec boil.ContextExecutor) (PrefSlice, error) {
	var o []*Pref

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Pref slice")
	}

	if len(prefAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Pref records in the query using the global executor
func (q prefQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Pref records in the query.
func (q prefQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count prefs rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q prefQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q prefQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if prefs exists")
	}

	return count > 0, nil
}

// Prefs retrieves all the records using an executor.
func Prefs(mods ...qm.QueryMod) prefQuery {
	mods = append(mods, qm.From("\"prefs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"prefs\".*"})
	}

	return prefQuery{q}
}

// FindPrefG retrieves a single record by ID.
func FindPrefG(ctx context.Context, iD int64, selectCols ...string) (*Pref, error) {
	return FindPref(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindPref retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPref(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Pref, error) {
	prefObj := &Pref{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"prefs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, prefObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from prefs")
	}

	if err = prefObj.doAfterSelectHooks(ctx, exec); err != nil {
		return prefObj, err
	}

	return prefObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Pref) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Pref) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no prefs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(prefColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	prefInsertCacheMut.RLock()
	cache, cached := prefInsertCache[key]
	prefInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			prefAllColumns,
			prefColumnsWithDefault,
			prefColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(prefType, prefMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(prefType, prefMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"prefs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"prefs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into prefs")
	}

	if !cached {
		prefInsertCacheMut.Lock()
		prefInsertCache[key] = cache
		prefInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Pref record using the global executor.
// See Update for more documentation.
func (o *Pref) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Pref.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Pref) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	prefUpdateCacheMut.RLock()
	cache, cached := prefUpdateCache[key]
	prefUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			prefAllColumns,
			prefPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update prefs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"prefs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, prefPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(prefType, prefMapping, append(wl, prefPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update prefs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for prefs")
	}

	if !cached {
		prefUpdateCacheMut.Lock()
		prefUpdateCache[key] = cache
		prefUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q prefQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q prefQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for prefs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for prefs")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PrefSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PrefSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), prefPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"prefs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, prefPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in pref slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all pref")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Pref) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Pref) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no prefs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(prefColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	prefUpsertCacheMut.RLock()
	cache, cached := prefUpsertCache[key]
	prefUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			prefAllColumns,
			prefColumnsWithDefault,
			prefColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			prefAllColumns,
			prefPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert prefs, could not build update column list")
		}

		ret := strmangle.SetComplement(prefAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(prefPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert prefs, could not build conflict column list")
			}

			conflict = make([]string, len(prefPrimaryKeyColumns))
			copy(conflict, prefPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"prefs\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(prefType, prefMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(prefType, prefMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert prefs")
	}

	if !cached {
		prefUpsertCacheMut.Lock()
		prefUpsertCache[key] = cache
		prefUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Pref record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Pref) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Pref record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Pref) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Pref provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), prefPrimaryKeyMapping)
	sql := "DELETE FROM \"prefs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from prefs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for prefs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q prefQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q prefQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no prefQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from prefs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for prefs")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o PrefSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PrefSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(prefBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), prefPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"prefs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, prefPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pref slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for prefs")
	}

	if len(prefAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Pref) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Pref provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Pref) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPref(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PrefSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty PrefSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PrefSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PrefSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), prefPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"prefs\".* FROM \"prefs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, prefPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PrefSlice")
	}

	*o = slice

	return nil
}

// PrefExistsG checks if the Pref row exists.
func PrefExistsG(ctx context.Context, iD int64) (bool, error) {
	return PrefExists(ctx, boil.GetContextDB(), iD)
}

// PrefExists checks if the Pref row exists.
func PrefExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"prefs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if prefs exists")
	}

	return exists, nil
}

// Exists checks if the Pref row exists.
func (o *Pref) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PrefExists(ctx, exec, o.ID)
}

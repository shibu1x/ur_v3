// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testHouses(t *testing.T) {
	t.Parallel()

	query := Houses()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testHousesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &House{}
	if err = randomize.Struct(seed, o, houseDBTypes, true, houseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize House struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Houses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testHousesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &House{}
	if err = randomize.Struct(seed, o, houseDBTypes, true, houseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize House struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Houses().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Houses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testHousesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &House{}
	if err = randomize.Struct(seed, o, houseDBTypes, true, houseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize House struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := HouseSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Houses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testHousesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &House{}
	if err = randomize.Struct(seed, o, houseDBTypes, true, houseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize House struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := HouseExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if House exists: %s", err)
	}
	if !e {
		t.Errorf("Expected HouseExists to return true, but got false.")
	}
}

func testHousesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &House{}
	if err = randomize.Struct(seed, o, houseDBTypes, true, houseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize House struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	houseFound, err := FindHouse(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if houseFound == nil {
		t.Error("want a record, got nil")
	}
}

func testHousesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &House{}
	if err = randomize.Struct(seed, o, houseDBTypes, true, houseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize House struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Houses().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testHousesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &House{}
	if err = randomize.Struct(seed, o, houseDBTypes, true, houseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize House struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Houses().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testHousesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	houseOne := &House{}
	houseTwo := &House{}
	if err = randomize.Struct(seed, houseOne, houseDBTypes, false, houseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize House struct: %s", err)
	}
	if err = randomize.Struct(seed, houseTwo, houseDBTypes, false, houseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize House struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = houseOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = houseTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Houses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testHousesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	houseOne := &House{}
	houseTwo := &House{}
	if err = randomize.Struct(seed, houseOne, houseDBTypes, false, houseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize House struct: %s", err)
	}
	if err = randomize.Struct(seed, houseTwo, houseDBTypes, false, houseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize House struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = houseOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = houseTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Houses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func houseBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *House) error {
	*o = House{}
	return nil
}

func houseAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *House) error {
	*o = House{}
	return nil
}

func houseAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *House) error {
	*o = House{}
	return nil
}

func houseBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *House) error {
	*o = House{}
	return nil
}

func houseAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *House) error {
	*o = House{}
	return nil
}

func houseBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *House) error {
	*o = House{}
	return nil
}

func houseAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *House) error {
	*o = House{}
	return nil
}

func houseBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *House) error {
	*o = House{}
	return nil
}

func houseAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *House) error {
	*o = House{}
	return nil
}

func testHousesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &House{}
	o := &House{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, houseDBTypes, false); err != nil {
		t.Errorf("Unable to randomize House object: %s", err)
	}

	AddHouseHook(boil.BeforeInsertHook, houseBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	houseBeforeInsertHooks = []HouseHook{}

	AddHouseHook(boil.AfterInsertHook, houseAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	houseAfterInsertHooks = []HouseHook{}

	AddHouseHook(boil.AfterSelectHook, houseAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	houseAfterSelectHooks = []HouseHook{}

	AddHouseHook(boil.BeforeUpdateHook, houseBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	houseBeforeUpdateHooks = []HouseHook{}

	AddHouseHook(boil.AfterUpdateHook, houseAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	houseAfterUpdateHooks = []HouseHook{}

	AddHouseHook(boil.BeforeDeleteHook, houseBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	houseBeforeDeleteHooks = []HouseHook{}

	AddHouseHook(boil.AfterDeleteHook, houseAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	houseAfterDeleteHooks = []HouseHook{}

	AddHouseHook(boil.BeforeUpsertHook, houseBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	houseBeforeUpsertHooks = []HouseHook{}

	AddHouseHook(boil.AfterUpsertHook, houseAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	houseAfterUpsertHooks = []HouseHook{}
}

func testHousesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &House{}
	if err = randomize.Struct(seed, o, houseDBTypes, true, houseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize House struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Houses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testHousesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &House{}
	if err = randomize.Struct(seed, o, houseDBTypes, true); err != nil {
		t.Errorf("Unable to randomize House struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(houseColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Houses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testHousesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &House{}
	if err = randomize.Struct(seed, o, houseDBTypes, true, houseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize House struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testHousesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &House{}
	if err = randomize.Struct(seed, o, houseDBTypes, true, houseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize House struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := HouseSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testHousesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &House{}
	if err = randomize.Struct(seed, o, houseDBTypes, true, houseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize House struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Houses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	houseDBTypes = map[string]string{`ID`: `bigint`, `Code`: `character varying`, `PrefCode`: `character varying`, `Name`: `character varying`, `RoomsGotAt`: `timestamp without time zone`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_            = bytes.MinRead
)

func testHousesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(housePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(houseAllColumns) == len(housePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &House{}
	if err = randomize.Struct(seed, o, houseDBTypes, true, houseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize House struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Houses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, houseDBTypes, true, housePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize House struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testHousesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(houseAllColumns) == len(housePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &House{}
	if err = randomize.Struct(seed, o, houseDBTypes, true, houseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize House struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Houses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, houseDBTypes, true, housePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize House struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(houseAllColumns, housePrimaryKeyColumns) {
		fields = houseAllColumns
	} else {
		fields = strmangle.SetComplement(
			houseAllColumns,
			housePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := HouseSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testHousesUpsert(t *testing.T) {
	t.Parallel()

	if len(houseAllColumns) == len(housePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := House{}
	if err = randomize.Struct(seed, &o, houseDBTypes, true); err != nil {
		t.Errorf("Unable to randomize House struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert House: %s", err)
	}

	count, err := Houses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, houseDBTypes, false, housePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize House struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert House: %s", err)
	}

	count, err = Houses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
